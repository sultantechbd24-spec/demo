<!DOCTYPE html>
<html lang="bn">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taniya Vabi Viral Link</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {
            font-family: sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            position: relative;
        }

        .sticky-wrapper-top {
            position: sticky;
            top: 0;
            z-index: 1000;
            background-color: #f0f2f5;
        }

        .header {
            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%);
            color: #fff;
            text-align: center;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .header-content {
            max-width: 1000px;
            margin: 0 auto;
        }
        
        .header h1 {
            font-size: 24px;
            margin: 0;
            margin-bottom: 10px;
            font-weight: bold;
        }
        
        .header p {
            font-size: 16px;
            margin: 0;
            font-weight: bold;
        }

        .ad-container {
            text-align: center;
            margin: 5px 0 0;
        }

        .mobile-ad { display: none; }
        .desktop-ad { display: block; }

        .category-bar {
            display: flex;
            justify-content: space-around;
            flex-wrap: nowrap;
            overflow-x: hidden;
            padding: 10px 0;
            background-color: #fff;
            margin: 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            white-space: nowrap;
            position: sticky;
            top: 0;
            z-index: 999;
        }
        .category-bar button {
            background-color: #e0e0e0;
            color: #333;
            border: none;
            border-radius: 20px;
            padding: 8px 10px;
            margin: 0 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s ease, color 0.3s ease;
            flex-grow: 1;
        }
        .category-bar button.active {
            background-color: #2575fc;
            color: #fff;
        }
        .category-bar button:hover {
            background-color: #d0d0d0;
        }
        @media (max-width: 767px) {
            .category-bar button {
                padding: 8px 5px;
                font-size: 12px;
            }
        }
        
        .container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            max-width: 1000px;
            margin: 0 auto;
            padding: 10px 20px 20px;
        }

        .card {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            flex-grow: 1; 
            flex-shrink: 1;
            text-align: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            
            opacity: 0;
            transform: translateY(20px);
            animation: slideUp 0.6s forwards;

            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
        }
        
        .card:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        .card:active {
            transform: scale(1.01);
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .card:nth-child(50n+1) { animation-delay: 0.1s; }
        .card:nth-child(50n+2) { animation-delay: 0.2s; }
        .card:nth-child(50n+3) { animation-delay: 0.3s; }
        .card:nth-child(4) { animation-delay: 0.4s; }
        .card:nth-child(5) { animation-delay: 0.5s; }
        .card:nth-child(6) { animation-delay: 0.6s; }
        .card:nth-child(7) { animation-delay: 0.7s; }

        .card-image-container {
            width: 70px;
            height: 70px;
            overflow: hidden;
            flex-shrink: 0;
            margin-right: 15px;
            border-radius: 5px;
        }

        .card-image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .card-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            text-align: left;
        }

        .card-title {
            font-size: 16px;
            color: #333;
            margin: 0;
            white-space: normal;
            word-wrap: break-word;
        }

        .card-divider {
            height: 1.5px;
            width: 90%;
            background-color: #e0e0e0;
            margin: 5px 0;
        }
        
        .task-button {
            background-color: #ff9100;
            color: #fff;
            border: none;
            padding: 12px 10px;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            flex-shrink: 0;
            margin-left: 15px;
            width: 110px;
            text-align: center;
        }
        
        .task-button:hover, .task-button:active {
            background-color: #e58200;
        }

        @media (min-width: 768px) {
            .card {
                flex-basis: calc(100% - 15px);
            }
            .desktop-ad { display: block; }
        }
        
        @media (max-width: 767px) {
             .header h1 {
                font-size: 20px;
            }
            .header p {
                font-size: 14px;
            }
            .container {
                gap: 10px;
            }
            .card {
                flex-basis: calc(100% - 10px);
            }
            .card-title {
                font-size: 14px;
            }
            .task-button {
                font-size: 12px;
                padding: 10px 8px;
                width: 90px;
            }
            .mobile-ad { display: block; }
            .category-bar button {
                padding: 8px 5px;
                font-size: 12px;
            }
        }

        .task-completed {
            background-color: #28a745;
        }

        .task-completed:hover {
            background-color: #218838;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <h1>‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ 10 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞</h1>
            <p>‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶ü ‡¶π‡¶≤‡ßá‡¶á ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶§‡ßá ‡¶™‡ßå‡¶Å‡¶õ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§</p>
        </div>
    </div>
    
    <div class="sticky-wrapper-top">
        <div class="ad-container desktop-ad">
            <script async type="text/javascript">
                atOptions = {
                    'key' : '3107b60e8baa0d0e886adf12d55fbd7e',
                    'format' : 'iframe',
                    'height' : 90,
                    'width' : 728,
                    'params' : {}
                };
            </script>
            <script async type="text/javascript" src="//www.highperformanceformat.com/3107b60e8baa0d0e886adf12d55fbd7e/invoke.js"></script>
        </div>

        <div class="ad-container mobile-ad">
            <script async type="text/javascript">
                atOptions = {
                    'key' : '02a9c12a5270a25efa5325c0e42ffc59',
                    'format' : 'iframe',
                    'height' : 50,
                    'width' : 320,
                    'params' : {}
                };
            </script>
            <script async type="text/javascript" src="//www.highperformanceformat.com/02a9c12a5270a25efa5325c0e42ffc59/invoke.js"></script>
        </div>
        
        <div class="category-bar">
            <button data-category="all" class="active">All</button>
            <button data-category="viral">Viral video ü•µ</button>
            <button data-category="tiktoker">Tiktoker üòú</button>
            <button data-category="premium">‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ üëë</button>
        </div>
    </div>

    <div class="container">
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const adLinks = [
                'https://www.profitableratecpm.com/gpbenjxu?key=bebb9ec59e6fe86414605a44c4b0ad9f',
                'https://www.profitableratecpm.com/vayrvz28p?key=c6fdae697483b5c58b9b2c33ed412845',
                'https://www.profitableratecpm.com/njmk9xpav?key=116655e1097328cc4cfb2c69fcfe6294',
                'https://www.profitableratecpm.com/bxpys4w3p1?key=548da758e411d97dc9752aa68d0a7502',
                'https://www.profitableratecpm.com/xbqsnpvv6?key=3c2dbdef651bb2d6e0638b75d579cd1a'
            ];
            
            const cardData = [
                { id: 1, title: "ü•µü•µü•µ", image: "http://googleusercontent.com/file_content/0", videoLink: "https://drive.google.com/drive/folders/...", category: ["tiktoker"], tasks: 3 },
                { id: 2, title: "Uff ü•µ", image: "http://googleusercontent.com/file_content/0", videoLink: "https://drive.google.com/drive/folders/...", category: ["viral"], tasks: 3 },
                { id: 3, title: "‡¶ï‡ßú‡¶æ", image: "https://raw.githubusercontent.com/nth-link/NTH-link/refs/heads/main/images/4.jpg", videoLink: "https://drive.google.com/drive/folders/...", category: ["viral"], tasks: 3 },
                { id: 4, title: "18 ta viedo", image: "https://raw.githubusercontent.com/nth-link/NTH-link/refs/heads/main/images/3.jpg", videoLink: "https://drive.google.com/drive/folders/...", category: ["tiktoker"], tasks: 5 },
                { id: 5, title: "10 ‡¶ü‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì", image: "https://raw.githubusercontent.com/nth-link/NTH-link/refs/heads/main/images/2.jpg", videoLink: "https://drive.google.com/drive/folders/...", category: ["tiktoker"], tasks: 5 },
                { id: 6, title: "‡¶ï‡¶ø ‡¶¨‡¶æ‡¶®‡¶æ‡¶á‡¶õ‡ßá", image: "https://raw.githubusercontent.com/nth-link/NTH-link/refs/heads/main/images/1.jpg", videoLink: "https://drive.google.com/drive/folders/...", category: ["premium"], tasks: 10 },
                { id: 7, title: "‡¶™‡ßÅ‡¶∞‡ßã ‡¶Æ‡¶ß‡ßÅ", image: "https://raw.githubusercontent.com/nth-link/NTH-link/refs/heads/main/images/1.jpg", videoLink: "https://drive.google.com/drive/folders/...", category: ["premium"], tasks: 10 },
            ];

            const container = document.querySelector('.container');
            const categoryButtons = document.querySelectorAll('.category-bar button');

            function loadTaskState() {
                const storedState = localStorage.getItem('taskState');
                return storedState ? JSON.parse(storedState) : {};
            }

            function saveTaskState(state) {
                localStorage.setItem('taskState', JSON.stringify(state));
            }
            
            let taskState = loadTaskState();

            // Handle task completion on page focus
            window.addEventListener('focus', () => {
                const pendingTask = localStorage.getItem('pendingTaskId');
                const adClicked = localStorage.getItem('adClicked');

                if (pendingTask && adClicked) {
                    const cardId = pendingTask;
                    const initialTasks = cardData.find(d => d.id == cardId).tasks;
                    let currentTasks = taskState[cardId] || initialTasks;

                    if (currentTasks > 0) {
                        currentTasks--;
                        taskState[cardId] = currentTasks;
                        saveTaskState(taskState);
                        
                        localStorage.removeItem('pendingTaskId');
                        localStorage.removeItem('adClicked');
                        
                        alert('‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá!'); 
                        renderCards(document.querySelector('.category-bar button.active').dataset.category);
                    }
                }
            });

            function createCard(data) {
                const card = document.createElement('div');
                card.classList.add('card');
                card.setAttribute('data-card-id', data.id);
                card.setAttribute('data-video-link', data.videoLink);
                card.setAttribute('data-category', data.category.join(','));

                const initialTasks = data.tasks;
                const currentTasks = taskState[data.id] || initialTasks;
                const buttonText = currentTasks > 0 ? `Watch Ads (${currentTasks}/${initialTasks})` : 'Watch the Video';
                const buttonClass = currentTasks > 0 ? '' : 'task-completed';

                card.innerHTML = `
                    <div class="card-image-container">
                        <img src="${data.image}" alt="${data.title}" loading="lazy">
                    </div>
                    <div class="card-content">
                        <h3 class="card-title">${data.title}</h3>
                        <hr class="card-divider">
                    </div>
                    <button class="task-button ${buttonClass}">${buttonText}</button>
                `;
                return card;
            }

            function renderCards(filterCategory = 'all') {
                container.innerHTML = '';
                let filteredData = cardData;
                if (filterCategory !== 'all') {
                    filteredData = cardData.filter(card => card.category.includes(filterCategory));
                }

                filteredData.forEach(data => {
                    const card = createCard(data);
                    container.appendChild(card);
                });
                setupTaskButtons();
            }

            function setupTaskButtons() {
                const cards = document.querySelectorAll('.card');
                cards.forEach(card => {
                    const button = card.querySelector('.task-button');
                    const cardId = card.getAttribute('data-card-id');
                    const videoLink = card.dataset.videoLink;
                    const initialTasks = cardData.find(d => d.id == cardId).tasks;
                    
                    button.addEventListener('click', (event) => {
                        event.stopPropagation();
                        
                        let currentTasks = taskState[cardId] || initialTasks;

                        if (currentTasks <= 0) {
                            window.location.href = videoLink;
                        } else {
                            const currentAdIndex = initialTasks - currentTasks;
                            const currentAdLink = adLinks[currentAdIndex % adLinks.length];
                            
                            localStorage.setItem('pendingTaskId', cardId);
                            localStorage.setItem('adLink', currentAdLink); 
                            
                            window.open('adpage.html', '_blank');
                        }
                    });
                    
                    card.addEventListener('click', () => {
                         card.style.transform = 'scale(1.02)';
                         setTimeout(() => {
                           card.style.transform = 'scale(1)';
                         }, 200);
                    });
                });
            }

            categoryButtons.forEach(button => {
                button.addEventListener('click', () => {
                    categoryButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    const category = button.getAttribute('data-category');
                    renderCards(category);
                });
            });
            
            renderCards();
        });
    </script>
    
    <script async type='text/javascript' src='//pl27408564.profitableratecpm.com/6f/9e/55/6f9e557cf4f6d1ad34e52bf37ab2156a.js'></script>
</body>
</html>
